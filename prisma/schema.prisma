generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Roles {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  users          Users[]
  Authorizations Authorizations?
}

model Privileges {
  id_privilege   Int              @id @default(autoincrement())
  authorizations Authorizations[]
}

model Authorizations {
  id_role      Int        @id
  id_privilege Int
  Roles        Roles      @relation(fields: [id_role], references: [id])
  Privileges   Privileges @relation(fields: [id_privilege], references: [id_privilege])

  @@unique([id_role, id_privilege])
}

model Users {
  id              Int     @id @default(autoincrement())
  username        String  @unique
  password        String
  email           String? @unique
  profile_picture String?
  role_id         Int
  token           String? @db.VarChar(100)
  balance         Int     @default(0)
  Roles           Roles   @relation(fields: [role_id], references: [id])

  Transactions    Transactions[]
  WastePickUp     WastePickUp[]
  Articles        Articles[]
  Videos          Videos[]
  paymentRequests PaymentRequest[] @relation("UserPaymentRequests")
  paymentsToPay   PaymentRequest[] @relation("UserPaymentsToPay")

  answers SecretAnswer[]
}

model WasteCategory {
  id        Int     @id @default(autoincrement())
  category  String
  isDeleted Boolean @default(false)

  WasteType WasteType[]
}

model WasteType {
  id                Int               @id @default(autoincrement())
  waste_category_id Int
  type              String
  isDeleted         Boolean           @default(false)
  Pricelist         Pricelist[]
  WasteCategory     WasteCategory     @relation(fields: [waste_category_id], references: [id])
  TransactionData   TransactionData[]
}

model UOM {
  id        Int     @id @default(autoincrement())
  unit      String
  isDeleted Boolean @default(false)

  Pricelist       Pricelist[]
  TransactionData TransactionData[]
}

model Transactions {
  id               Int       @id @default(autoincrement())
  user_id          Int
  transaction_date DateTime?
  total            Int?
  approved_by      Int?
  Users            Users     @relation(fields: [user_id], references: [id])

  TransactionData TransactionData[]
}

model Pricelist {
  waste_type_id Int
  uom_id        Int
  price         Int
  isActive      Boolean   @default(true)
  start_date    DateTime
  end_date      DateTime?

  WasteType WasteType @relation(fields: [waste_type_id], references: [id])
  UOM       UOM       @relation(fields: [uom_id], references: [id])

  @@id([waste_type_id, uom_id])
}

model TransactionData {
  id             Int   @id @default(autoincrement())
  transaction_id Int
  waste_type_id  Int
  uom_id         Int
  quantity       Int
  price          Float

  Transactions Transactions @relation(fields: [transaction_id], references: [id])
  WasteType    WasteType    @relation(fields: [waste_type_id], references: [id])
  UOM          UOM          @relation(fields: [uom_id], references: [id])

  @@unique([transaction_id, waste_type_id, uom_id, quantity, price])
}

model Videos {
  id            Int           @id @default(autoincrement())
  title         String
  description   String
  duration      Int
  format        String
  thumbnail_url String
  url           String
  upload_date   DateTime
  uploaded_by   String
  isActive      Boolean
  video_order   Int
  LogVideos     LogVideos[]
  categoryId    Int

  category      VideoCategory @relation(fields: [categoryId], references: [id])
  user       Users         @relation(fields: [uploaded_by], references: [username])
  
}

model Articles {
  id            Int             @id @default(autoincrement())
  title         String
  content       String
  isPublished   Boolean
  created_by    String
  created_date  DateTime
  article_order Int
  LogArticles   LogArticles[]
  categoryId    Int
  thumbnail_url String

  user         Users            @relation(fields: [created_by], references: [username])
  category      ArticleCategory @relation(fields: [categoryId], references: [id])
}

model VideoCategory {
  id       Int      @id @default(autoincrement())
  category String

  Videos Videos[]
}

model ArticleCategory {
  id       Int @id @default(autoincrement())
  category String

  Articles Articles[]
}

model LogArticles {
  article_id    Int
  accessed_by   String
  accessed_time DateTime @default(now())

  Articles Articles @relation(fields: [article_id], references: [id])

  @@id([article_id, accessed_by, accessed_time])
}

model LogVideos {
  video_id      Int
  accessed_by   String
  accessed_time DateTime @default(now())

  Videos Videos @relation(fields: [video_id], references: [id])

  @@id([video_id, accessed_by, accessed_time])
}

enum Status {
  Scheduled
  Completed
  Cancelled
}

model WastePickUp {
  id           Int      @id @default(autoincrement())
  user_id      Int
  pick_up_date DateTime
  location     String
  status       Status
  created_date DateTime @default(now())

  Users Users @relation(fields: [user_id], references: [id])
}

model PaymentRequest {
  payment_request_id    Int            @id @default(autoincrement())
  user_id               Int
  request_date          DateTime
  request_amount        Int
  accepted_amount       Int?
  expected_payment_date DateTime?
  payment_date          DateTime?
  payment_by            Int?
  confirmation_status   STATUS_PAYMENT
  confirmation_date     DateTime?
  proof_picture         String?

  user  Users @relation("UserPaymentRequests", fields: [user_id], references: [id])
  payer Users? @relation("UserPaymentsToPay", fields: [payment_by], references: [id])

}

model SecretQuestion {
  question_id   Int @id @default(autoincrement())
  question_text String 

  answer SecretAnswer[]
}

model SecretAnswer {
  answer_id   Int      @id @default(autoincrement())
  user_id     Int      @unique
  question_id Int      
  answer_text String

  user        Users          @relation(fields: [user_id], references: [id])
  question    SecretQuestion @relation(fields: [question_id], references: [question_id])
}


enum STATUS_PAYMENT {
  Sedang_diproses
  Ambil_uang
  Selesai
  Batal
}
